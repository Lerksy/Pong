#pragma once
#include <SDL.h>
#include <SDL_image.h>
#include <SDL_ttf.h>
#include <map>
#include <string>
#include <fstream>
#include <iostream>
#include <filesystem>
#include <algorithm>


class TextureLoader
{
private:
	std::map<std::string, SDL_Texture*> textures;
	std::map<std::string, SDL_Texture*> text_textures;

	//SDL stuff
	SDL_Renderer* renderer = nullptr;
	TTF_Font* font = nullptr;
	SDL_Color textColor = { 0, 255, 0 };

	void initAssetFolder();
	void initFont();
	std::string removeExtension(std::string filename);
	void buildTextureFromFile(std::string filename);

public:
	TextureLoader(SDL_Renderer* renderer);
	SDL_Texture* getTexture(std::string name);
	SDL_Texture* renderText(std::string text);

	//deleting autogenerated constructors
	TextureLoader() = delete;
	TextureLoader(TextureLoader&) = delete;
	TextureLoader(TextureLoader&&) = delete;
	~TextureLoader();

};

